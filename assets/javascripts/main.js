// Generated by CoffeeScript 1.6.2
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

require.config({
  baseUrl: '/javascripts',
  shim: {
    backbone: {
      deps: ['underscore', 'jquery'],
      exports: 'Backbone'
    },
    underscore: {
      exports: '_'
    }
  },
  paths: {
    jquery: 'vendor/jquery',
    underscore: 'vendor/underscore',
    backbone: 'vendor/backbone',
    templates: 'templates'
  }
});

require(['jquery', 'underscore', 'templates', 'backbone', 'app/models/itemModel', 'app/collections/itemCollection', 'app/views/buttonsView', 'app/views/itemNameListItem', 'app/views/itemTypeListItem', 'app/views/itemNameList', 'app/views/itemTypeList', 'app/views/mainItemDetailsView', 'app/views/itemDataDetails', 'app/views/itemFormDetails'], function($, _, templates, Backbone, ItemModel, ItemCollection, ButtonsView, ItemNameListItem, ItemTypeListItem, ItemNameList, ItemTypeList, MainItemDetailsView, ItemDataDetails, ItemFormDetails) {
  window.app = (function() {
    var init, _detailsModel, _itemsCollection, _router;
    _detailsModel = null;
    _itemsCollection = null;
    _router = null;
    init = function() {
      var Router, _ref;
      return Router = (function(_super) {
        __extends(Router, _super);

        function Router() {
          _ref = Router.__super__.constructor.apply(this, arguments);
          return _ref;
        }

        Router.prototype.routes = {
          'items/:id': 'showItem',
          'item/delete': 'deleteItem'
        };

        Router.prototype.showItem = function(id) {
          var item;
          item = _itemsCollection.get(id);
          return item.fetch({
            success: function(model, response) {
              var itemDataDetails;
              itemDataDetails = new ItemDataDetails({
                model: model
              });
              itemDataDetail.render();
              _detailsModel = item;
              window.history.start();
              return 0;
            },
            error: function(model, response) {
              alert('Server was not able to return the model with id = ' + id);
              return 0;
            }
          });
        };

        Router.prototype.deleteItem = function() {
          $('div.rightside').find('div.property-value').remove();
          $('div.rightside').find('div.property-description').remove();
          if (!_itemsCollection.hasQueryOccurred) {
            _itemsCollection.fetch({
              reset: true
            });
          }
          window.history.back();
          return 0;
        };

        _router = new Router();

        Backbone.history.start();

        _itemsCollection = new ItemCollection();

        new ButtonsView().render();

        return Router;

      })(Backbone.Router);
    };
    return {
      initialize: function() {
        return init();
      },
      setItemDetailsModel: function(model) {
        return _detailsModel = model;
      },
      getItemDetailsModel: function() {
        return _detailsModel;
      },
      getItemsCollection: function() {
        return _itemsCollection;
      },
      getRouter: function() {
        return _router;
      },
      makeAjaxCall: function(method, url, success, error) {
        $.ajax({
          type: method,
          url: url,
          jsonpCallback: 'callback',
          async: false,
          contentType: 'application/json',
          dataType: 'jsonp',
          success: success,
          error: error
        });
        return 0;
      }
    };
  })();
  return window.app.initialize();
});
