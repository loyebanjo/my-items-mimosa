// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'app/views/itemNameListItem'], function($, _, Backbone, ItemNameListItem) {
  var ItemNameList, _ref;
  return ItemNameList = (function(_super) {
    __extends(ItemNameList, _super);

    function ItemNameList() {
      this.addNameItems = __bind(this.addNameItems, this);
      _ref = ItemNameList.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ItemNameList.prototype.tagName = 'ul';

    ItemNameList.prototype.id = 'itemnames';

    ItemNameList.prototype.className = 'itemdata';

    ItemNameList.prototype.initialize = function() {
      this.model.on('add', this.addNameItem, this);
      this.model.on('destroy', this.render, this);
      this.model.on('queryOccurred', this.render, this);
      return 0;
    };

    ItemNameList.prototype.addNewItem = function(newItem) {
      this.$el.append(new ItemNameListItem({
        model: newItem
      }).render());
      return 0;
    };

    ItemNameList.prototype.addNameItems = function(name) {
      this.addNewItem(name);
      return 0;
    };

    ItemNameList.prototype.addModels = function(models) {
      if (this.model) {
        _.each(models, this.addNameItems, this);
      }
      return 0;
    };

    ItemNameList.prototype.render = function() {
      var models;
      this.$el.find('li').remove();
      models = this.model.queriedModels ? this.model.queriedModels : this.model.models;
      this.addModels(models);
      return this.$el;
    };

    return ItemNameList;

  })(Backbone.View);
});
