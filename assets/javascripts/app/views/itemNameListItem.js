// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'templates', 'app/views/itemDataDetails'], function($, _, Backbone, templates, ItemDataDetails) {
  var ItemNameListItem, _ref;
  return ItemNameListItem = (function(_super) {
    __extends(ItemNameListItem, _super);

    function ItemNameListItem() {
      this.renderListItemCallback = __bind(this.renderListItemCallback, this);
      _ref = ItemNameListItem.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ItemNameListItem.prototype.tagName = 'li';

    ItemNameListItem.prototype.className = 'listItem';

    ItemNameListItem.prototype.events = {
      'click': 'renderDataItem'
    };

    ItemNameListItem.prototype.renderDataItem = function() {
      var button, textValue;
      textValue = this.$el.find('span').text();
      if (textValue) {
        button = $.find('#saveItem')[0];
        if (button.innerText !== 'Update Item') {
          button.innerHTML = 'Update Item';
        }
        new ItemDataDetails({
          model: this.model
        }).render();
        app.setItemDetailsModel(this.model);
      }
      return 0;
    };

    ItemNameListItem.prototype.renderListItemCallback = function(err, out) {
      return this.$el.html(out);
    };

    ItemNameListItem.prototype.render = function() {
      templates.render('itemName', {
        item_name: this.model.toJSON().item_name
      }, this.renderListItemCallback);
      return this.$el;
    };

    return ItemNameListItem;

  })(Backbone.View);
});
