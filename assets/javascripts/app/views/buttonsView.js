// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'templates', 'backbone', 'app/models/itemModel', 'app/views/itemFormDetails', 'app/views/itemDataDetails'], function($, _, templates, Backbone, ItemModel, ItemFormDetails, ItemDataDetails) {
  var ButtonsView, _ref;
  return ButtonsView = (function(_super) {
    __extends(ButtonsView, _super);

    function ButtonsView() {
      this.templatesCallback = __bind(this.templatesCallback, this);
      _ref = ButtonsView.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ButtonsView.prototype.el = 'div.bottomside';

    ButtonsView.prototype.events = {
      'click #newItem': 'createNewItem',
      'click #saveItem': 'saveItem',
      'click #deleteItem': 'deleteItem'
    };

    ButtonsView.prototype.createItemFormDetails = function(model) {
      this.itemFormDetails = new ItemFormDetails({
        model: model
      });
      this.itemFormDetails.render();
      this.saveButton.text('Save Item');
      return 0;
    };

    ButtonsView.prototype.createNewItem = function() {
      this.createItemFormDetails(new ItemModel());
      return false;
    };

    ButtonsView.prototype.saveItem = function() {
      if (this.saveButton.text() === 'Update Item') {
        this.createItemFormDetails(app.getItemDetailsModel());
        return 0;
      } else {
        return this.saveButton.text('Update Item');
      }
    };

    ButtonsView.prototype.deleteItem = function() {};

    ButtonsView.prototype.templatesCallback = function(err, out) {
      return this.$el.html(out);
    };

    ButtonsView.prototype.render = function() {
      templates.render('buttons', {}, this.templatesCallback);
      this.saveButton = this.$el.find('#saveItem');
      return this.$el;
    };

    return ButtonsView;

  })(Backbone.View);
});
