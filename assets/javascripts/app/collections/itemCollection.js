// Generated by CoffeeScript 1.6.2
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'app/models/itemModel', 'app/views/itemNameList', 'app/views/itemTypeList'], function($, _, Backbone, ItemModel, ItemNameList, ItemListType) {
  var ItemCollection, _ref;
  return ItemCollection = (function(_super) {
    __extends(ItemCollection, _super);

    function ItemCollection() {
      this.itemTypeCollectionCallback = __bind(this.itemTypeCollectionCallback, this);
      this.errorInitializeCallback = __bind(this.errorInitializeCallback, this);
      this.successInitializeCallback = __bind(this.successInitializeCallback, this);
      this.itemCollectionCallback = __bind(this.itemCollectionCallback, this);
      _ref = ItemCollection.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    ItemCollection.prototype.model = ItemModel;

    ItemCollection.prototype.url = 'http://localhost/php-server/php/items.php';

    ItemCollection.prototype.itemCollectionCallback = function(item, index, list) {
      var model;
      model = new ItemModel(item);
      this.models.push(model);
      return 0;
    };

    ItemCollection.prototype.successInitializeCallback = function(response, status) {
      if (status) {
        this.models = [];
        this.response = response;
        _.each(response, this.itemCollectionCallback, this);
        this.itemNameList = new ItemNameList({
          model: this
        });
      }
      $('div.leftside').append(this.itemNameList.render());
      this.setItemTypeList();
      return 0;
    };

    ItemCollection.prototype.errorInitializeCallback = function(response) {
      alert("There has been a problem retrieveing data from the server");
      return 0;
    };

    ItemCollection.prototype.initialize = function() {
      this.modelTypeCollection;
      app.makeAjaxCall('GET', this.url, this.successInitializeCallback, this.errorInitializeCallback);
      return 0;
    };

    ItemCollection.prototype.resetItemNameList = function(textValue) {
      var selectedItems;
      if (textValue !== 'All') {
        selectedItems = this.where({
          item_type: textValue
        });
        this.hasQueryOccurred = true;
        this.queriedModels = selectedItems;
      } else {
        this.hasQueryOccurred = false;
        this.queriedModels = null;
      }
      this.itemNameList.model = this;
      this.itemNameList.render();
      return 0;
    };

    ItemCollection.prototype.itemTypeCollectionCallback = function(model) {
      var stop, type;
      type = model.toJSON().item_type;
      if (!_.contains(this.types, type)) {
        this.types.push(type);
        this.modelTypeCollection.add([
          new ItemModel({
            item_type: type
          })
        ]);
        stop = null;
      }
      return 0;
    };

    ItemCollection.prototype.setItemTypeList = function() {
      if (this.modelTypeCollection) {
        this.modelTypeCollection.reset();
      }
      this.types = [];
      this.modelTypeCollection = new Backbone.Collection();
      this.modelTypeCollection.add([
        new ItemModel({
          item_type: 'All'
        })
      ]);
      _.each(this.models, this.itemTypeCollectionCallback, this);
      if (!this.itemTypeList) {
        this.itemTypeList = new ItemListType({
          model: this.modelTypeCollection
        });
        $('div.leftside').append(this.itemTypeList.render());
      } else {
        this.itemTypeList.model = this.modelTypeCollection;
        this.itemTypeList.render();
      }
      if (this.types.length > 7) {
        this.types = null;
      }
      return 0;
    };

    ItemCollection.prototype.getModelTypeCollection = function() {
      return this.modelTypeCollection;
    };

    return ItemCollection;

  })(Backbone.Collection);
});
